Index: app/src/main/java/com/example/guru2project/LeftTime.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.guru2project\r\n\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\n\r\nclass LeftTime : AppCompatActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_left_time)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/guru2project/LeftTime.kt	(revision 61d101e0923c20d0c1fe0f026da00375a5f09bcf)
+++ app/src/main/java/com/example/guru2project/LeftTime.kt	(date 1627976094408)
@@ -1,11 +1,115 @@
 package com.example.guru2project
 
-import androidx.appcompat.app.AppCompatActivity
+import android.app.usage.UsageEvents
+import android.app.usage.UsageStatsManager
+import android.content.Context
+import android.os.Build
 import android.os.Bundle
+import androidx.annotation.RequiresApi
+import androidx.appcompat.app.AppCompatActivity
+import java.text.SimpleDateFormat
+import java.time.LocalDate
+import java.time.format.DateTimeFormatter
+import java.util.*
 
 class LeftTime : AppCompatActivity() {
+    @RequiresApi(Build.VERSION_CODES.O)
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_left_time)
+
+        val sharedPref = getSharedPreferences("pref", 0)
+        val sdf = SimpleDateFormat("yyyy-MM-dd")
+        val currentDate = sdf.format(Date())
+        val nowDate: LocalDate = LocalDate.now()
+        nowDate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"))
+        var tz=TimeZone.getDefault()
+        var tzId= tz.toZoneId()
+        var dtNow = LocalDate.now(); // 2017-08-23
+        var dtStart = dtNow.atStartOfDay(tzId).toInstant().toEpochMilli()
+        /*//오늘 이미 실행이 되었을때
+        if (sharedPref.getString("LAST_LAUNCH_DATE", "nodate")!!.contains(currentDate)) {
+
+        } else {
+            //오늘 처음 실행했을때
+            // LAST_LAUNCH_DATE가 하루 이상일때 if문
+            // 적립
+            val editor = sharedPref.edit()
+            editor.putString("LAST_LAUNCH_DATE", currentDate)
+            //editor.commit()
+            editor.apply()
+        }*/
+        queryUsageTimes(dtStart, System.currentTimeMillis())
+
+    }
+
+    //사용한 앱의 패키지 이름과 사용시간 가져오기
+    @RequiresApi(Build.VERSION_CODES.LOLLIPOP)
+    private fun queryUsageTimes(startTime: Long, endTime: Long){
+        var currentEvent: UsageEvents.Event
+        val allEvents: MutableList<UsageEvents.Event> = ArrayList()
+        val map: HashMap<String, Long> = HashMap()
+        val mUsageStatsManager = getSystemService(Context.USAGE_STATS_SERVICE) as UsageStatsManager
+        // 발생 이벤트를 쿼리
+        val usageEvents = mUsageStatsManager.queryEvents(startTime, endTime)
+
+        while (usageEvents.hasNextEvent()) {
+            currentEvent = UsageEvents.Event()
+            usageEvents.getNextEvent(currentEvent)
+            val packageName = currentEvent.packageName
+            //추가 이벤트가 발견되면 이벤트 목록에 추가
+            if (currentEvent.eventType == UsageEvents.Event.ACTIVITY_RESUMED || currentEvent.eventType == UsageEvents.Event.ACTIVITY_PAUSED || currentEvent.eventType == UsageEvents.Event.ACTIVITY_STOPPED) {
+                allEvents.add(currentEvent)
+                if (!map.containsKey(packageName)) {
+                    map[packageName] = 0
+                }
+            }
+        }
+
+        //이벤트 발생시
+        for (i in 0 until (allEvents.size - 1) step 1) {
+            val event0 = allEvents[i]
+            val event1 = allEvents[i + 1]
+
+            //앱 실행할때마다 사용시간 측정
+            if (event0.eventType == UsageEvents.Event.ACTIVITY_RESUMED &&
+                (event1.eventType == UsageEvents.Event.ACTIVITY_PAUSED || event1.eventType == UsageEvents.Event.ACTIVITY_STOPPED)
+                && event0.packageName == event1.packageName) {
+                val runtime = event1.timeStamp - event0.timeStamp
+                val tInForeground = map[event0.packageName]!!.plus(runtime)
+                map[event0.packageName] = tInForeground
+            }
+        }
+
+
+
+        /*val packageName = "com.example.three" // 패키지명 예시 데이터
+
+        val data=map[packageName]
+
+
+        val appinfo = packageManager.getApplicationInfo(packageName, PackageManager.GET_META_DATA)
+
+        val mApplabel: String = packageManager.getApplicationLabel(appinfo).toString()
+        System.out.println(mApplabel)
+        System.out.println(data)
+        System.out.println(map.keys)
+        var what : Long =0
+        map.forEach{ it-> what+=it.value
+            System.out.println(it.value)
+            System.out.println((it.value / (1000 * 60)) % 60)
+            System.out.println(it.value / (1000 * 60 * 60))
+            val name=it.key
+            val info= packageManager.getApplicationInfo(name, PackageManager.GET_META_DATA)
+            val label=packageManager.getApplicationLabel(info)
+            System.out.println(label)
+
+
+        }*/
+        val valueList: List<Long> = ArrayList(map.values)
+        valueList.sortedWith(Long::compareTo)//{ s1: String, s2: String? -> s1.compareTo(s2!!) }
+        for (value in valueList) {
+            println("Value: $value")
+        }
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/guru2project/SettingTimeActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.guru2project\r\n\r\nimport android.app.AlertDialog\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.provider.Settings\r\nimport android.view.View\r\nimport android.widget.AdapterView\r\nimport android.widget.ArrayAdapter\r\nimport android.widget.Button\r\nimport android.widget.Spinner\r\nimport androidx.annotation.RequiresApi\r\n\r\nclass SettingTimeActivity : AppCompatActivity() {\r\n\r\n    private var setHour : Int = 0\r\n    private var setMinute : Int = 0\r\n\r\n    private lateinit var hourSpinner: Spinner\r\n    private lateinit var minuteSpinner: Spinner\r\n    private lateinit var btnTimeSet: Button\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_setting_time)\r\n\r\n        hourSpinner = findViewById(R.id.hour_spinner)\r\n        minuteSpinner = findViewById(R.id.minute_spinner)\r\n        btnTimeSet = findViewById(R.id.btnSetTime)\r\n\r\n        //hourSpinner.setSelection(0) 원하는 포지션 이동(나중에 추가)\r\n\r\n        //시간 선택\r\n        hourSpinner.onItemSelectedListener = object: AdapterView.OnItemSelectedListener {\r\n            override fun onNothingSelected(parent: AdapterView<*>?) {\r\n            }\r\n            override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {\r\n                setHour = hourSpinner.getItemAtPosition(position).toString().toInt()\r\n            }\r\n        }\r\n        //분 선택\r\n        minuteSpinner.onItemSelectedListener = object: AdapterView.OnItemSelectedListener {\r\n            override fun onNothingSelected(parent: AdapterView<*>?) {\r\n\r\n            }\r\n            override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {\r\n                setMinute = minuteSpinner.getItemAtPosition(position).toString().toInt()\r\n            }\r\n        }\r\n\r\n        //시간설정 확인\r\n        btnTimeSet.setOnClickListener {\r\n            var dlg = AlertDialog.Builder(this)\r\n            //dlg.setTitle(\"권한이 필요한 이유\")\r\n            dlg.setMessage(\"${setHour}시간 ${setMinute}분으로 설정하시겠습니까?\")\r\n            dlg.setPositiveButton( \"확인\") { dialog, which ->\r\n                startActivity(Intent(this, LeftTime::class.java))\r\n                finish()\r\n            }\r\n            dlg.setNegativeButton(\"취소\", null)\r\n            dlg.show()\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/guru2project/SettingTimeActivity.kt	(revision 61d101e0923c20d0c1fe0f026da00375a5f09bcf)
+++ app/src/main/java/com/example/guru2project/SettingTimeActivity.kt	(date 1627966597184)
@@ -54,7 +54,6 @@
         //시간설정 확인
         btnTimeSet.setOnClickListener {
             var dlg = AlertDialog.Builder(this)
-            //dlg.setTitle("권한이 필요한 이유")
             dlg.setMessage("${setHour}시간 ${setMinute}분으로 설정하시겠습니까?")
             dlg.setPositiveButton( "확인") { dialog, which ->
                 startActivity(Intent(this, LeftTime::class.java))
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_X\" default=\"false\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision 61d101e0923c20d0c1fe0f026da00375a5f09bcf)
+++ .idea/misc.xml	(date 1627966598438)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_X" default="false" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_14" default="false" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_2021-07-31__12_32__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_2021-07-31__12_32__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_2021-07-28__2_15__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_2021-07-28__2_15__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_2021-07-29__5_43__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_2021-07-29__5_43__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_2021-07-28__4_50__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_2021-07-28__4_50__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_2021-08-03__2_47__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_2021-08-03__2_47__Default_Changelist_.xml
