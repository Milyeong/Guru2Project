Index: app/src/main/res/layout/activity_hours_of_use.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".HoursOfUse\">\r\n\r\n    <CalendarView\r\n        android:id=\"@+id/calendarView\"\r\n        android:layout_width=\"350dp\"\r\n        android:layout_height=\"296dp\"\r\n        android:layout_marginStart=\"30dp\"\r\n        android:layout_marginTop=\"26dp\"\r\n        android:layout_marginEnd=\"30dp\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <TableLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/calendarView\">\r\n\r\n        <TableRow\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\" />\r\n\r\n        <TableRow\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\" />\r\n\r\n        <TableRow\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\" />\r\n\r\n        <TableRow\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\" />\r\n    </TableLayout>\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_hours_of_use.xml	(revision 7125852d78e5dc74fc0ac50b7dfa4e467b2150e2)
+++ app/src/main/res/layout/activity_hours_of_use.xml	(date 1628093729279)
@@ -17,26 +17,79 @@
         app:layout_constraintStart_toStartOf="parent"
         app:layout_constraintTop_toTopOf="parent" />
 
-    <TableLayout
+    <androidx.constraintlayout.widget.ConstraintLayout
         android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        app:layout_constraintBottom_toBottomOf="parent"
-        app:layout_constraintTop_toBottomOf="@id/calendarView">
+        android:layout_height="300dp"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/calendarView">
+
+        <TextView
+            android:id="@+id/tvAppName1"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginStart="50dp"
+            android:layout_marginTop="40dp"
+            android:text="사용기록 없음"
+            android:textSize="24sp"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toTopOf="parent" />
+
+        <TextView
+            android:id="@+id/tvUsageTimes1"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginEnd="50dp"
+            android:text="시간"
+            android:textSize="20sp"
+            app:layout_constraintBaseline_toBaselineOf="@+id/tvAppName1"
+            app:layout_constraintEnd_toEndOf="parent" />
+
+        <TextView
+            android:id="@+id/tvAppName2"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginStart="50dp"
+            android:layout_marginTop="40dp"
+            android:text="사용기록 없음"
+            android:textSize="24sp"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toBottomOf="@+id/tvAppName1" />
+
+        <TextView
+            android:id="@+id/tvUsageTimes2"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginEnd="50dp"
+            android:text="시간"
+            android:textSize="20sp"
+            app:layout_constraintBaseline_toBaselineOf="@+id/tvAppName2"
+            app:layout_constraintEnd_toEndOf="parent" />
+
+        <TextView
+            android:id="@+id/tvAppName3"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginStart="50dp"
+            android:layout_marginTop="40dp"
+            android:text="사용기록 없음"
+            android:textSize="24sp"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toBottomOf="@+id/tvAppName2" />
 
-        <TableRow
-            android:layout_width="match_parent"
-            android:layout_height="match_parent" />
+        <TextView
+            android:id="@+id/tvUsageTimes3"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginEnd="50dp"
+            android:text="시간"
+            android:textSize="20sp"
+            app:layout_constraintBaseline_toBaselineOf="@+id/tvAppName3"
+            app:layout_constraintEnd_toEndOf="parent" />
 
-        <TableRow
-            android:layout_width="match_parent"
-            android:layout_height="match_parent" />
 
-        <TableRow
-            android:layout_width="match_parent"
-            android:layout_height="match_parent" />
+    </androidx.constraintlayout.widget.ConstraintLayout>
 
-        <TableRow
-            android:layout_width="match_parent"
-            android:layout_height="match_parent" />
-    </TableLayout>
+
 </androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/java/com/example/guru2project/HoursOfUse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.guru2project\r\n\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\n\r\nclass HoursOfUse : AppCompatActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_hours_of_use)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/guru2project/HoursOfUse.kt	(revision 7125852d78e5dc74fc0ac50b7dfa4e467b2150e2)
+++ app/src/main/java/com/example/guru2project/HoursOfUse.kt	(date 1628091882707)
@@ -1,11 +1,31 @@
 package com.example.guru2project
 
-import androidx.appcompat.app.AppCompatActivity
 import android.os.Bundle
+import android.widget.CalendarView
+import android.widget.CalendarView.OnDateChangeListener
+import androidx.appcompat.app.AppCompatActivity
+
 
 class HoursOfUse : AppCompatActivity() {
+
+    lateinit var calendarView: CalendarView
+
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_hours_of_use)
+
+        calendarView = findViewById(R.id.calendarView)
+
+        calendarView.setOnDateChangeListener(OnDateChangeListener { view, year, month, dayOfMonth ->
+            /*diaryTextView.setVisibility(View.VISIBLE)
+            save_Btn.setVisibility(View.VISIBLE)
+            contextEditText.setVisibility(View.VISIBLE)
+            textView2.setVisibility(View.INVISIBLE)
+            cha_Btn.setVisibility(View.INVISIBLE)
+            del_Btn.setVisibility(View.INVISIBLE)
+            diaryTextView.setText(String.format("%d / %d / %d", year, month + 1, dayOfMonth))
+            contextEditText.setText("")
+            checkDay(year, month, dayOfMonth, userID)*/
+        })
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/guru2project/LeftTime.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.guru2project\r\n\r\nimport android.app.usage.UsageEvents\r\nimport android.app.usage.UsageStatsManager\r\nimport android.content.Context\r\nimport android.content.pm.PackageManager\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.widget.TextView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport java.time.LocalDate\r\nimport java.util.*\r\nimport kotlin.collections.HashMap\r\n\r\nclass LeftTime : AppCompatActivity() {\r\n\r\n    private lateinit var appName1: TextView\r\n    private lateinit var appUsageTime1: TextView\r\n    private lateinit var tvHours: TextView\r\n    private lateinit var tvMinuts: TextView\r\n    private lateinit var tvLeftTime: TextView\r\n\r\n    private lateinit var usageMap: HashMap<String, Long>\r\n\r\n    private var totalTime: Long = 0\r\n    private var goalHours: Long = 0\r\n    private var leftHours: Int = 0\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_left_time)\r\n\r\n        tvHours = findViewById(R.id.tvHours)\r\n        tvMinuts = findViewById(R.id.tvMinutes)\r\n        tvLeftTime = findViewById(R.id.LeftTimeText)\r\n\r\n        var tz= TimeZone.getDefault()\r\n        var tzId= tz.toZoneId()\r\n        var dtNow = LocalDate.now()\r\n        var dtStart = dtNow.atStartOfDay(tzId).toInstant().toEpochMilli()\r\n\r\n        usageMap = mapUsageTimes(dtStart, System.currentTimeMillis())\r\n\r\n        usageMap.forEach {it->\r\n            totalTime += it.value\r\n        }\r\n\r\n        // 사용시간을 기준으로 내림차순으로 배열\r\n        val result = usageMap.toList().sortedByDescending { (_, value) -> value}\r\n\r\n        var nameId:Int\r\n        var timeId:Int\r\n\r\n        for(i in result.indices) {\r\n            if(i==3)\r\n                break\r\n            nameId=resources.getIdentifier(\"tvAppName${i+1}\",\"id\", packageName)\r\n            timeId=resources.getIdentifier(\"tvUsageTimes${i+1}\",\"id\", packageName)\r\n\r\n            var appName=findViewById<TextView>(nameId)\r\n            var appUsageT=findViewById<TextView>(timeId)\r\n\r\n\r\n            var appInfo = packageManager.getApplicationInfo(result[i].first, PackageManager.GET_META_DATA)\r\n            var appLabel = packageManager.getApplicationLabel(appInfo)\r\n\r\n            appName.text=appLabel\r\n            appUsageT.text=\"${(result[i].second / (1000*60*60)) % 24}시간 ${((result[i].second)/(1000*60))%60}분\"\r\n\r\n\r\n        }\r\n        val pref = getSharedPreferences(\"pref\", MODE_PRIVATE)\r\n        /*val editor = pref.edit()\r\n        editor.putLong(\"GOAL_HOURS\", 86400000)\r\n        editor.apply()*/\r\n        goalHours = pref.getLong(\"GOAL_HOURS\", 0)\r\n        leftHours = (goalHours-totalTime).toInt()\r\n\r\n        //남은 시간\r\n        if(leftHours < 0){\r\n            //목표달성 실패\r\n            tvLeftTime.text=\"다음엔 더 노력해 봅시다!!\"\r\n\r\n        } else{\r\n\r\n            val min = (leftHours/ (1000*60))% 60\r\n            val hour =(leftHours / (1000*60*60))%24\r\n            tvHours.text=\"$hour\"\r\n            tvMinuts.text=\"$min\"\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    //하루동안 사용한 앱의 패키지 이름과 사용시간을 Map으로 가져오기\r\n    @RequiresApi(Build.VERSION_CODES.LOLLIPOP)\r\n    private fun mapUsageTimes(startTime: Long, endTime: Long) : HashMap<String, Long>{\r\n        var currentEvent: UsageEvents.Event\r\n        val allEvents: MutableList<UsageEvents.Event> = ArrayList()\r\n        val map: HashMap<String, Long> = HashMap()\r\n        val mUsageStatsManager = getSystemService(Context.USAGE_STATS_SERVICE) as UsageStatsManager\r\n        // 발생 이벤트를 쿼리\r\n        val usageEvents = mUsageStatsManager.queryEvents(startTime, endTime)\r\n\r\n        while (usageEvents.hasNextEvent()) {\r\n            currentEvent = UsageEvents.Event()\r\n            usageEvents.getNextEvent(currentEvent)\r\n            val packageName = currentEvent.packageName\r\n            //추가 이벤트가 발견되면 이벤트 목록에 추가\r\n            if (currentEvent.eventType == UsageEvents.Event.ACTIVITY_RESUMED || currentEvent.eventType == UsageEvents.Event.ACTIVITY_PAUSED || currentEvent.eventType == UsageEvents.Event.ACTIVITY_STOPPED) {\r\n                allEvents.add(currentEvent)\r\n                if (!map.containsKey(packageName)) {\r\n                    map[packageName] = 0\r\n                }\r\n            }\r\n        }\r\n\r\n        //이벤트 발생시\r\n        for (i in 0 until (allEvents.size - 1) step 1) {\r\n            val event0 = allEvents[i]\r\n            val event1 = allEvents[i + 1]\r\n\r\n            //앱 실행할때마다 사용시간 측정\r\n            if (event0.eventType == UsageEvents.Event.ACTIVITY_RESUMED &&\r\n                (event1.eventType == UsageEvents.Event.ACTIVITY_PAUSED || event1.eventType == UsageEvents.Event.ACTIVITY_STOPPED)\r\n                && event0.packageName == event1.packageName) {\r\n                val runtime = event1.timeStamp - event0.timeStamp\r\n                val tInForeground = map[event0.packageName]!!.plus(runtime)\r\n                map[event0.packageName] = tInForeground\r\n            }\r\n        }\r\n\r\n        return map\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/guru2project/LeftTime.kt	(revision 7125852d78e5dc74fc0ac50b7dfa4e467b2150e2)
+++ app/src/main/java/com/example/guru2project/LeftTime.kt	(date 1628084441853)
@@ -84,7 +84,6 @@
             tvLeftTime.text="다음엔 더 노력해 봅시다!!"
 
         } else{
-
             val min = (leftHours/ (1000*60))% 60
             val hour =(leftHours / (1000*60*60))%24
             tvHours.text="$hour"
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision 7125852d78e5dc74fc0ac50b7dfa4e467b2150e2)
+++ .idea/misc.xml	(date 1628080869546)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
Index: app/src/main/java/DBManager.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/DBManager.kt	(date 1628091409807)
+++ app/src/main/java/DBManager.kt	(date 1628091409807)
@@ -0,0 +1,18 @@
+import android.content.Context
+import android.database.sqlite.SQLiteDatabase
+import android.database.sqlite.SQLiteOpenHelper
+
+class DBManager(context: Context?,
+                name: String?,
+                factory: SQLiteDatabase.CursorFactory?,
+                version: Int
+) : SQLiteOpenHelper(context, name, factory, version) {
+    override fun onCreate(db: SQLiteDatabase?) {
+        db!!.execSQL("CREATE TABLE App (date text, name text, time INTEGER, rank INTEGER)")
+        db!!.execSQL("CREATE TABLE Time(date text, total INTEGER, goal INTEGER, true INTEGER)")
+    }
+
+    override fun onUpgrade(db: SQLiteDatabase?, oldVersion: Int, newVersion: Int) {
+        TODO("Not yet implemented")
+    }
+}
\ No newline at end of file
Index: app/src/main/res/values/arrays.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<resources>\r\n    <string-array name=\"hour_array\">\r\n        <item>1</item>\r\n        <item>2</item>\r\n        <item>3</item>\r\n        <item>4</item>\r\n        <item>5</item>\r\n    </string-array>\r\n    <string-array name=\"minute_array\">\r\n        <item>00</item>\r\n        <item>30</item>\r\n    </string-array>\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/arrays.xml	(revision 7125852d78e5dc74fc0ac50b7dfa4e467b2150e2)
+++ app/src/main/res/values/arrays.xml	(date 1628087302784)
@@ -1,6 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
     <string-array name="hour_array">
+        <item>0</item>
         <item>1</item>
         <item>2</item>
         <item>3</item>
Index: app/src/main/java/com/example/guru2project/SettingTimeActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.guru2project\r\n\r\nimport android.app.AlertDialog\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport android.widget.*\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\n\r\nclass SettingTimeActivity : AppCompatActivity() {\r\n\r\n\r\n    private var setHour : Int = 0\r\n    private var setMinute : Int = 0\r\n\r\n    private lateinit var hourSpinner: Spinner\r\n    private lateinit var minuteSpinner: Spinner\r\n    private lateinit var btnTimeSet: Button\r\n\r\n    var goalHours : Long =0\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_setting_time)\r\n\r\n\r\n        val pref = getSharedPreferences(\"pref\", MODE_PRIVATE)\r\n        val sdf = SimpleDateFormat(\"yyyy-MM-dd\")\r\n        val currentDate = sdf.format(Date())\r\n        val editor = pref.edit()\r\n        // 오늘 이미 실행했을 때\r\n        if (pref.getString(\"LAST_LAUNCH_DATE\", \"nodate\")!!.contains(currentDate)) {\r\n\r\n            //시간을 설정했을때\r\n            if (pref.getLong(\"GOAL_HOURS\", 0)>0){\r\n                val intent = Intent(this, LeftTime::class.java)\r\n                startActivity(intent)\r\n                finish()\r\n            } else{ //시간을 설정 안했을때\r\n                val intent = Intent(this, SettingTimeActivity::class.java)\r\n                startActivity(intent)\r\n                finish()\r\n            }\r\n\r\n        } else {//오늘 처음 실행했을때\r\n\r\n            // 설정시간 초기화\r\n            editor.putLong(\"GOAL_HOURS\", 0)\r\n            editor.putString(\"LAST_LAUNCH_DATE\", currentDate)\r\n            editor.apply()\r\n\r\n            // 어제 사용기록 가져온 후 어제 목표(데이터베이스에서 가져오기)보다 작으면 적립(함수로 구현)\r\n        }\r\n\r\n\r\n        hourSpinner = findViewById(R.id.hour_spinner)\r\n        minuteSpinner = findViewById(R.id.minute_spinner)\r\n        btnTimeSet = findViewById(R.id.btnSetTime)\r\n\r\n\r\n        //시간 선택\r\n        hourSpinner.onItemSelectedListener = object: AdapterView.OnItemSelectedListener {\r\n            override fun onNothingSelected(parent: AdapterView<*>?) {\r\n            }\r\n            override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {\r\n                setHour = hourSpinner.getItemAtPosition(position).toString().toInt()\r\n            }\r\n        }\r\n        //분 선택\r\n        minuteSpinner.onItemSelectedListener = object: AdapterView.OnItemSelectedListener {\r\n            override fun onNothingSelected(parent: AdapterView<*>?) {\r\n\r\n            }\r\n            override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {\r\n                setMinute = minuteSpinner.getItemAtPosition(position).toString().toInt()\r\n            }\r\n        }\r\n\r\n        //시간설정 확인\r\n        btnTimeSet.setOnClickListener {\r\n            var dlg = AlertDialog.Builder(this)\r\n            dlg.setMessage(\"${setHour}시간 ${setMinute}분으로 설정하시겠습니까?\")\r\n            dlg.setPositiveButton( \"확인\") { dialog, which ->\r\n                //목표시간 pref에 저장\r\n                goalHours = ( (setHour.toLong() * 60 ) + setMinute.toLong() ) *60*1000\r\n                val pref = getSharedPreferences(\"pref\", MODE_PRIVATE)\r\n                val editor = pref.edit()\r\n                //editor.clear()\r\n                editor.putLong(\"GOAL_HOURS\", goalHours)\r\n                editor.apply()\r\n                editor.commit()\r\n                //LeftTime으로\r\n                val intent = Intent(this, LeftTime::class.java)\r\n                startActivity(intent)\r\n                finish()\r\n            }\r\n            dlg.setNegativeButton(\"취소\", null)\r\n            dlg.show()\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n        /*@SuppressLint(\"PrivateApi\")\r\n        fun TimePicker.setTimeInterval(\r\n                timeInterval: Int = DEFAULT_INTERVAL\r\n        ) {\r\n            try {\r\n                val classForId = Class.forName(\"com.android.internal.R\\$id\")\r\n                val fieldId = classForId.getField(\"minute\").getInt(null)\r\n\r\n                (this.findViewById(fieldId) as NumberPicker).apply {\r\n                    minValue = MINUTES_MIN\r\n                    maxValue = MINUTES_MAX / timeInterval - 1\r\n                    displayedValues = getDisplayedValue(timeInterval)\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    private fun getDisplayedValue(timeInterval: Int = DEFAULT_INTERVAL): Array<String> {\r\n        val minutesArray = ArrayList<String>()\r\n        for (i in 0 until MINUTES_MAX step timeInterval) {\r\n            minutesArray.add(i.toString())\r\n        }\r\n\r\n        return minutesArray.toArray(arrayOf(\"\"))\r\n    }\r\n\r\n    private fun TimePicker.getDisplayedMinute(\r\n\r\n            timeInterval: Int = DEFAULT_INTERVAL\r\n    ): Int = minute * timeInterval*/\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/guru2project/SettingTimeActivity.kt	(revision 7125852d78e5dc74fc0ac50b7dfa4e467b2150e2)
+++ app/src/main/java/com/example/guru2project/SettingTimeActivity.kt	(date 1628088208380)
@@ -1,7 +1,7 @@
 package com.example.guru2project
 
 import android.app.AlertDialog
-import android.content.Context
+import android.widget.Toast
 import android.content.Intent
 import androidx.appcompat.app.AppCompatActivity
 import android.os.Bundle
@@ -27,23 +27,23 @@
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_setting_time)
 
+        hourSpinner = findViewById(R.id.hour_spinner)
+        minuteSpinner = findViewById(R.id.minute_spinner)
+        btnTimeSet = findViewById(R.id.btnSetTime)
 
         val pref = getSharedPreferences("pref", MODE_PRIVATE)
         val sdf = SimpleDateFormat("yyyy-MM-dd")
         val currentDate = sdf.format(Date())
         val editor = pref.edit()
+
         // 오늘 이미 실행했을 때
         if (pref.getString("LAST_LAUNCH_DATE", "nodate")!!.contains(currentDate)) {
 
-            //시간을 설정했을때
+            //시간을 이미 설정했을때
             if (pref.getLong("GOAL_HOURS", 0)>0){
                 val intent = Intent(this, LeftTime::class.java)
                 startActivity(intent)
                 finish()
-            } else{ //시간을 설정 안했을때
-                val intent = Intent(this, SettingTimeActivity::class.java)
-                startActivity(intent)
-                finish()
             }
 
         } else {//오늘 처음 실행했을때
@@ -57,11 +57,6 @@
         }
 
 
-        hourSpinner = findViewById(R.id.hour_spinner)
-        minuteSpinner = findViewById(R.id.minute_spinner)
-        btnTimeSet = findViewById(R.id.btnSetTime)
-
-
         //시간 선택
         hourSpinner.onItemSelectedListener = object: AdapterView.OnItemSelectedListener {
             override fun onNothingSelected(parent: AdapterView<*>?) {
@@ -82,65 +77,30 @@
 
         //시간설정 확인
         btnTimeSet.setOnClickListener {
-            var dlg = AlertDialog.Builder(this)
-            dlg.setMessage("${setHour}시간 ${setMinute}분으로 설정하시겠습니까?")
-            dlg.setPositiveButton( "확인") { dialog, which ->
-                //목표시간 pref에 저장
-                goalHours = ( (setHour.toLong() * 60 ) + setMinute.toLong() ) *60*1000
-                val pref = getSharedPreferences("pref", MODE_PRIVATE)
-                val editor = pref.edit()
-                //editor.clear()
-                editor.putLong("GOAL_HOURS", goalHours)
-                editor.apply()
-                editor.commit()
-                //LeftTime으로
-                val intent = Intent(this, LeftTime::class.java)
-                startActivity(intent)
-                finish()
-            }
-            dlg.setNegativeButton("취소", null)
-            dlg.show()
-
-        }
-
-    }
+            if(setHour == 0 && setMinute == 0) {
+                Toast.makeText(this, "최소 30분부터 설정 가능합니다", Toast.LENGTH_LONG).show()
+            } else{
+                var dlg = AlertDialog.Builder(this)
+                dlg.setMessage("${setHour}시간 ${setMinute}분으로 설정하시겠습니까?")
+                dlg.setPositiveButton( "확인") { dialog, which ->
+                    //목표시간 pref에 저장
+                    goalHours = ( (setHour.toLong() * 60 ) + setMinute.toLong() ) *60*1000
+                    editor.putLong("GOAL_HOURS", goalHours)
+                    editor.apply()
+                    //LeftTime으로
+                    val intent = Intent(this, LeftTime::class.java)
+                    startActivity(intent)
+                    finish()
+                }
+                dlg.setNegativeButton("취소", null)
+                dlg.show()
+            }
 
 
-        /*@SuppressLint("PrivateApi")
-        fun TimePicker.setTimeInterval(
-                timeInterval: Int = DEFAULT_INTERVAL
-        ) {
-            try {
-                val classForId = Class.forName("com.android.internal.R\$id")
-                val fieldId = classForId.getField("minute").getInt(null)
-
-                (this.findViewById(fieldId) as NumberPicker).apply {
-                    minValue = MINUTES_MIN
-                    maxValue = MINUTES_MAX / timeInterval - 1
-                    displayedValues = getDisplayedValue(timeInterval)
-                }
-            } catch (e: Exception) {
-                e.printStackTrace()
-            }
         }
 
-
-
-
-
-
-
-    private fun getDisplayedValue(timeInterval: Int = DEFAULT_INTERVAL): Array<String> {
-        val minutesArray = ArrayList<String>()
-        for (i in 0 until MINUTES_MAX step timeInterval) {
-            minutesArray.add(i.toString())
-        }
+    }
 
-        return minutesArray.toArray(arrayOf(""))
-    }
 
-    private fun TimePicker.getDisplayedMinute(
 
-            timeInterval: Int = DEFAULT_INTERVAL
-    ): Int = minute * timeInterval*/
 }
\ No newline at end of file
Index: app/src/main/java/com/example/guru2project/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.guru2project\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.AlertDialog\r\nimport android.app.AppOpsManager\r\nimport android.content.ContentValues.TAG\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.os.Process\r\nimport android.provider.Settings\r\nimport android.text.TextUtils\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport android.widget.Toast\r\nimport androidx.annotation.RequiresApi\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.ktx.Firebase\r\nimport java.text.SimpleDateFormat\r\nimport java.time.LocalDate\r\nimport java.util.*\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n\r\n    private lateinit var auth: FirebaseAuth\r\n    private lateinit var input_email: EditText\r\n    private lateinit var input_pw: EditText\r\n    private lateinit var btnJoin: Button\r\n    private lateinit var btnlogin: Button\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_login)\r\n//\r\n//        if (!checkForPermission()) {\r\n//            var dlg = AlertDialog.Builder(this)\r\n//            dlg.setTitle(\"권한이 필요한 이유\")\r\n//            dlg.setMessage(\"어플 사용을 위해서 사용정보 접근 허용이 필요합니다.\")\r\n//            dlg.setPositiveButton(\"확인\") { dialog, which ->\r\n//                startActivity(Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS))\r\n//            }\r\n//            dlg.setNegativeButton(\"취소\", null)\r\n//            dlg.show()\r\n//\r\n//        } else { //이미 권한이 허용된 경우\r\n//            //화면 넘어감\r\n//        }\r\n\r\n\r\n//        val pref = getSharedPreferences(\"pref\", MODE_PRIVATE)\r\n//        val sdf = SimpleDateFormat(\"yyyy-MM-dd\")\r\n//        val currentDate = sdf.format(Date())\r\n//        val editor = pref.edit()\r\n//        // 오늘 이미 실행했을 때\r\n//        if (pref.getString(\"LAST_LAUNCH_DATE\", \"nodate\")!!.contains(currentDate)) {\r\n//\r\n//            //시간을 설정했을때\r\n//            if (pref.getLong(\"GOAL_HOURS\", 0)>0){\r\n//                val intent = Intent(this, LeftTime::class.java)\r\n//                startActivity(intent)\r\n//                finish()\r\n//            } else{ //시간을 설정 안했을때\r\n//                val intent = Intent(this, SettingTimeActivity::class.java)\r\n//                startActivity(intent)\r\n//                finish()\r\n//            }\r\n//\r\n//        } else {//오늘 처음 실행했을때\r\n//\r\n//            // 설정시간 초기화\r\n//            editor.putLong(\"GOAL_HOURS\", 0)\r\n//            editor.putString(\"LAST_LAUNCH_DATE\", currentDate)\r\n//            editor.apply()\r\n//\r\n//            // 어제 사용기록 가져온 후 어제 목표(데이터베이스에서 가져오기)보다 작으면 적립(함수로 구현)\r\n//        }\r\n        // 사용자 로그인상태 확인\r\n        auth = Firebase.auth\r\n\r\n        // 사용자가 로그인되어 있다면(자동로그인) SettingTimeAcitivity로\r\n        if (auth.currentUser != null) {\r\n            val intent = Intent(this, SettingTimeActivity::class.java)\r\n            startActivity(intent)\r\n            finish()\r\n        }\r\n\r\n        // 뷰 연결\r\n        input_email = findViewById(R.id.login_email)\r\n        input_pw = findViewById(R.id.login_pw)\r\n        btnJoin = findViewById(R.id.btnBackToSignUp)\r\n        btnlogin = findViewById(R.id.btnLogin)\r\n\r\n        btnJoin.setOnClickListener {\r\n            val intent = Intent(this, SignUpActivity::class.java)\r\n            startActivity(intent)\r\n            finish()\r\n        }\r\n\r\n        btnlogin.setOnClickListener(View.OnClickListener {\r\n            var email = input_email.text.toString()\r\n            var pw = input_pw.text.toString()\r\n\r\n            if (TextUtils.isEmpty(email)) {\r\n                Toast.makeText(applicationContext, \"이메일을 입력해주세요.\", Toast.LENGTH_SHORT).show()\r\n                return@OnClickListener\r\n            }\r\n            if (TextUtils.isEmpty(pw)) {\r\n                Toast.makeText(applicationContext, \"비밀번호를 입력해주세요.\", Toast.LENGTH_SHORT).show()\r\n                return@OnClickListener\r\n            }\r\n\r\n            // 로그인 시도\r\n            auth.signInWithEmailAndPassword(email, pw).addOnCompleteListener(this) { task ->\r\n                if (task.isSuccessful) {\r\n                    Log.d(TAG, \"로그인:성공\")\r\n                    val user = auth.currentUser\r\n\r\n                    val intent = Intent(this, SettingTimeActivity::class.java)\r\n                    startActivity(intent)\r\n                    finish()\r\n                    // updateUi(user) 함수 사용 - 만들어야 함.\r\n                } else {\r\n                    Log.w(TAG, \"로그인:실패\", task.exception)\r\n                    Toast.makeText(baseContext, \"인증에 실패했습니다.\", Toast.LENGTH_SHORT).show()\r\n                    //updateUI(null)\r\n                }\r\n\r\n            }\r\n\r\n        })\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/guru2project/MainActivity.kt	(revision 7125852d78e5dc74fc0ac50b7dfa4e467b2150e2)
+++ app/src/main/java/com/example/guru2project/MainActivity.kt	(date 1628087643311)
@@ -19,6 +19,7 @@
 import android.widget.Toast
 import androidx.annotation.RequiresApi
 import com.google.firebase.auth.FirebaseAuth
+import com.google.firebase.auth.ktx.actionCodeSettings
 import com.google.firebase.auth.ktx.auth
 import com.google.firebase.ktx.Firebase
 import java.text.SimpleDateFormat
@@ -36,56 +37,60 @@
     @RequiresApi(Build.VERSION_CODES.O)
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
-        setContentView(R.layout.activity_login)
-//
-//        if (!checkForPermission()) {
-//            var dlg = AlertDialog.Builder(this)
-//            dlg.setTitle("권한이 필요한 이유")
-//            dlg.setMessage("어플 사용을 위해서 사용정보 접근 허용이 필요합니다.")
-//            dlg.setPositiveButton("확인") { dialog, which ->
-//                startActivity(Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS))
-//            }
-//            dlg.setNegativeButton("취소", null)
-//            dlg.show()
-//
-//        } else { //이미 권한이 허용된 경우
-//            //화면 넘어감
-//        }
+        setContentView(R.layout.activity_loading)
+        val intent = Intent(this, SettingTimeActivity::class.java)
+        startActivity(intent)
+        finish()
+    }
+}
+        /*//사용정보 접근 권한이 허용되지 않았을때
+        if (!checkForPermission()) {
+            var dlg = AlertDialog.Builder(this)
+            dlg.setTitle("권한이 필요한 이유")
+            dlg.setMessage("어플 사용을 위해서 사용정보 접근 허용이 필요합니다.")
+            dlg.setPositiveButton( "확인") { dialog, which ->
+                startActivity(Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS))
+            }
+            dlg.setNegativeButton("취소", null)
+            dlg.show()
+
+        } else { //이미 권한이 허용된 경우
+            //화면 넘어감
+        }
+
+        val pref = getSharedPreferences("pref", MODE_PRIVATE)
+        val sdf = SimpleDateFormat("yyyy-MM-dd")
+        val currentDate = sdf.format(Date())
+        val editor = pref.edit()
+        // 오늘 이미 실행했을 때
+        if (pref.getString("LAST_LAUNCH_DATE", "nodate")!!.contains(currentDate)) {
+
+            //시간을 설정했을때
+            if (pref.getLong("GOAL_HOURS", 0)>0){
+                val intent = Intent(this, LeftTime::class.java)
+                startActivity(intent)
+                finish()
+            } else{ //시간을 설정 안했을때
+                val intent = Intent(this, SettingTimeActivity::class.java)
+                startActivity(intent)
+                finish()
+            }
 
+        } else {//오늘 처음 실행했을때
 
-//        val pref = getSharedPreferences("pref", MODE_PRIVATE)
-//        val sdf = SimpleDateFormat("yyyy-MM-dd")
-//        val currentDate = sdf.format(Date())
-//        val editor = pref.edit()
-//        // 오늘 이미 실행했을 때
-//        if (pref.getString("LAST_LAUNCH_DATE", "nodate")!!.contains(currentDate)) {
-//
-//            //시간을 설정했을때
-//            if (pref.getLong("GOAL_HOURS", 0)>0){
-//                val intent = Intent(this, LeftTime::class.java)
-//                startActivity(intent)
-//                finish()
-//            } else{ //시간을 설정 안했을때
-//                val intent = Intent(this, SettingTimeActivity::class.java)
-//                startActivity(intent)
-//                finish()
-//            }
-//
-//        } else {//오늘 처음 실행했을때
-//
-//            // 설정시간 초기화
-//            editor.putLong("GOAL_HOURS", 0)
-//            editor.putString("LAST_LAUNCH_DATE", currentDate)
-//            editor.apply()
-//
-//            // 어제 사용기록 가져온 후 어제 목표(데이터베이스에서 가져오기)보다 작으면 적립(함수로 구현)
-//        }
-        // 사용자 로그인상태 확인
+            // 설정시간 초기화
+            editor.putLong("GOAL_HOURS", 0)
+            editor.putString("LAST_LAUNCH_DATE", currentDate)
+            editor.apply()
+
+            // 어제 사용기록 가져온 후 어제 목표(데이터베이스에서 가져오기)보다 작으면 적립(함수로 구현)
+        }
+        *//*//*/ 사용자 로그인상태 확인
         auth = Firebase.auth
 
         // 사용자가 로그인되어 있다면(자동로그인) SettingTimeAcitivity로
         if (auth.currentUser != null) {
-            val intent = Intent(this, SettingTimeActivity::class.java)
+            val intent = Intent(this, LeftTime::class.java)
             startActivity(intent)
             finish()
         }
@@ -96,7 +101,7 @@
         btnJoin = findViewById(R.id.btnBackToSignUp)
         btnlogin = findViewById(R.id.btnLogin)
 
-        btnJoin.setOnClickListener {
+        btnJoin.setOnClickListener{
             val intent = Intent(this, SignUpActivity::class.java)
             startActivity(intent)
             finish()
@@ -106,18 +111,18 @@
             var email = input_email.text.toString()
             var pw = input_pw.text.toString()
 
-            if (TextUtils.isEmpty(email)) {
-                Toast.makeText(applicationContext, "이메일을 입력해주세요.", Toast.LENGTH_SHORT).show()
+            if(TextUtils.isEmpty(email)) {
+                Toast.makeText(applicationContext,"이메일을 입력해주세요.", Toast.LENGTH_SHORT).show()
                 return@OnClickListener
             }
-            if (TextUtils.isEmpty(pw)) {
-                Toast.makeText(applicationContext, "비밀번호를 입력해주세요.", Toast.LENGTH_SHORT).show()
+            if(TextUtils.isEmpty(pw)){
+                Toast.makeText(applicationContext,"비밀번호를 입력해주세요.", Toast.LENGTH_SHORT).show()
                 return@OnClickListener
             }
 
             // 로그인 시도
-            auth.signInWithEmailAndPassword(email, pw).addOnCompleteListener(this) { task ->
-                if (task.isSuccessful) {
+            auth.signInWithEmailAndPassword(email, pw).addOnCompleteListener(this) {task ->
+                if(task.isSuccessful) {
                     Log.d(TAG, "로그인:성공")
                     val user = auth.currentUser
 
@@ -133,6 +138,22 @@
 
             }
 
-        })
+        })*/
+
+
+
+
     }
-}
\ No newline at end of file
+
+
+    // 사용정보 접근 권한 허용 여부 확인
+    @SuppressLint("NewApi")
+    private fun checkForPermission(): Boolean {
+        val appOps = getSystemService(Context.APP_OPS_SERVICE) as AppOpsManager
+        val mode = appOps.checkOpNoThrow(
+            AppOpsManager.OPSTR_GET_USAGE_STATS,
+            Process.myUid(), packageName)
+        return mode == AppOpsManager.MODE_ALLOWED
+    }
+
+}*/
