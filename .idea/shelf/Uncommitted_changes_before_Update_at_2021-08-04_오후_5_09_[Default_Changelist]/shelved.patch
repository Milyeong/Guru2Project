Index: app/src/main/java/com/example/guru2project/HoursOfUse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.guru2project\r\n\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\n\r\nclass HoursOfUse : AppCompatActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_hours_of_use)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/guru2project/HoursOfUse.kt	(revision 97296888eb8cf9747d2d2807e112474742524598)
+++ app/src/main/java/com/example/guru2project/HoursOfUse.kt	(date 1628029994716)
@@ -1,11 +1,28 @@
 package com.example.guru2project
 
-import androidx.appcompat.app.AppCompatActivity
 import android.os.Bundle
+import android.widget.CalendarView
+import android.widget.CalendarView.OnDateChangeListener
+import androidx.appcompat.app.AppCompatActivity
+
 
 class HoursOfUse : AppCompatActivity() {
+
+    lateinit var calendarView: CalendarView
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_hours_of_use)
+
+        calendarView.setOnDateChangeListener(OnDateChangeListener { view, year, month, dayOfMonth ->
+            diaryTextView.setVisibility(View.VISIBLE)
+            save_Btn.setVisibility(View.VISIBLE)
+            contextEditText.setVisibility(View.VISIBLE)
+            textView2.setVisibility(View.INVISIBLE)
+            cha_Btn.setVisibility(View.INVISIBLE)
+            del_Btn.setVisibility(View.INVISIBLE)
+            diaryTextView.setText(String.format("%d / %d / %d", year, month + 1, dayOfMonth))
+            contextEditText.setText("")
+            checkDay(year, month, dayOfMonth, userID)
+        })
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/guru2project/SettingTimeActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.guru2project\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.AlertDialog\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.provider.Settings\r\nimport android.view.View\r\nimport android.widget.*\r\nimport androidx.annotation.RequiresApi\r\n\r\nclass SettingTimeActivity : AppCompatActivity() {\r\n\r\n    private var setHour : Int = 0\r\n    private var setMinute : Int = 0\r\n\r\n    private lateinit var hourSpinner: Spinner\r\n    private lateinit var minuteSpinner: Spinner\r\n    private lateinit var btnTimeSet: Button\r\n\r\n    /*val DEFAULT_INTERVAL = 5\r\n    val MINUTES_MIN = 0\r\n    val MINUTES_MAX = 60*/\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_setting_time)\r\n\r\n        hourSpinner = findViewById(R.id.hour_spinner)\r\n        minuteSpinner = findViewById(R.id.minute_spinner)\r\n        btnTimeSet = findViewById(R.id.btnSetTime)\r\n\r\n        //hourSpinner.setSelection(0) 원하는 포지션 이동(나중에 추가)\r\n\r\n\r\n        //시간 선택\r\n        hourSpinner.onItemSelectedListener = object: AdapterView.OnItemSelectedListener {\r\n            override fun onNothingSelected(parent: AdapterView<*>?) {\r\n            }\r\n            override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {\r\n                setHour = hourSpinner.getItemAtPosition(position).toString().toInt()\r\n            }\r\n        }\r\n        //분 선택\r\n        minuteSpinner.onItemSelectedListener = object: AdapterView.OnItemSelectedListener {\r\n            override fun onNothingSelected(parent: AdapterView<*>?) {\r\n\r\n            }\r\n            override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {\r\n                setMinute = minuteSpinner.getItemAtPosition(position).toString().toInt()\r\n            }\r\n        }\r\n\r\n        //시간설정 확인\r\n        btnTimeSet.setOnClickListener {\r\n            var dlg = AlertDialog.Builder(this)\r\n            dlg.setMessage(\"${setHour}시간 ${setMinute}분으로 설정하시겠습니까?\")\r\n            dlg.setPositiveButton( \"확인\") { dialog, which ->\r\n                startActivity(Intent(this, LeftTime::class.java))\r\n                finish()\r\n            }\r\n            dlg.setNegativeButton(\"취소\", null)\r\n            dlg.show()\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n        /*@SuppressLint(\"PrivateApi\")\r\n        fun TimePicker.setTimeInterval(\r\n                timeInterval: Int = DEFAULT_INTERVAL\r\n        ) {\r\n            try {\r\n                val classForId = Class.forName(\"com.android.internal.R\\$id\")\r\n                val fieldId = classForId.getField(\"minute\").getInt(null)\r\n\r\n                (this.findViewById(fieldId) as NumberPicker).apply {\r\n                    minValue = MINUTES_MIN\r\n                    maxValue = MINUTES_MAX / timeInterval - 1\r\n                    displayedValues = getDisplayedValue(timeInterval)\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    private fun getDisplayedValue(timeInterval: Int = DEFAULT_INTERVAL): Array<String> {\r\n        val minutesArray = ArrayList<String>()\r\n        for (i in 0 until MINUTES_MAX step timeInterval) {\r\n            minutesArray.add(i.toString())\r\n        }\r\n\r\n        return minutesArray.toArray(arrayOf(\"\"))\r\n    }\r\n\r\n    private fun TimePicker.getDisplayedMinute(\r\n\r\n            timeInterval: Int = DEFAULT_INTERVAL\r\n    ): Int = minute * timeInterval*/\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/guru2project/SettingTimeActivity.kt	(revision 97296888eb8cf9747d2d2807e112474742524598)
+++ app/src/main/java/com/example/guru2project/SettingTimeActivity.kt	(date 1628062161226)
@@ -1,18 +1,16 @@
 package com.example.guru2project
 
-import android.annotation.SuppressLint
 import android.app.AlertDialog
+import android.content.Context
 import android.content.Intent
-import android.os.Build
 import androidx.appcompat.app.AppCompatActivity
 import android.os.Bundle
-import android.provider.Settings
 import android.view.View
 import android.widget.*
-import androidx.annotation.RequiresApi
 
 class SettingTimeActivity : AppCompatActivity() {
 
+
     private var setHour : Int = 0
     private var setMinute : Int = 0
 
@@ -20,9 +18,8 @@
     private lateinit var minuteSpinner: Spinner
     private lateinit var btnTimeSet: Button
 
-    /*val DEFAULT_INTERVAL = 5
-    val MINUTES_MIN = 0
-    val MINUTES_MAX = 60*/
+    var goalHours : Long =0
+
 
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
@@ -32,8 +29,6 @@
         minuteSpinner = findViewById(R.id.minute_spinner)
         btnTimeSet = findViewById(R.id.btnSetTime)
 
-        //hourSpinner.setSelection(0) 원하는 포지션 이동(나중에 추가)
-
 
         //시간 선택
         hourSpinner.onItemSelectedListener = object: AdapterView.OnItemSelectedListener {
@@ -58,7 +53,13 @@
             var dlg = AlertDialog.Builder(this)
             dlg.setMessage("${setHour}시간 ${setMinute}분으로 설정하시겠습니까?")
             dlg.setPositiveButton( "확인") { dialog, which ->
-                startActivity(Intent(this, LeftTime::class.java))
+                goalHours = ( (setHour.toLong() * 60) + setMinute.toLong() ) *60*60
+                val pref = getSharedPreferences("pref", MODE_PRIVATE)
+                val editor = pref.edit()
+                editor.putLong("GOAL_HOURS", goalHours)
+                editor.apply()
+                val intent = Intent(this, LeftTime::class.java)
+                startActivity(intent)
                 finish()
             }
             dlg.setNegativeButton("취소", null)
Index: app/src/main/java/com/example/guru2project/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.guru2project\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.AlertDialog\r\nimport android.app.AppOpsManager\r\nimport android.content.ContentValues.TAG\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.os.Process\r\nimport android.provider.Settings\r\nimport android.text.TextUtils\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport android.widget.Toast\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.ktx.Firebase\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n\r\n    private lateinit var auth: FirebaseAuth\r\n    private lateinit var input_email: EditText\r\n    private lateinit var input_pw: EditText\r\n    private lateinit var btnJoin: Button\r\n    private lateinit var btnlogin: Button\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n\r\n        //사용정보 접근 권한이 허용되지 않았을때\r\n        if (!checkForPermission()) {\r\n            var dlg = AlertDialog.Builder(this)\r\n            dlg.setTitle(\"권한이 필요한 이유\")\r\n            dlg.setMessage(\"어플 사용을 위해서 사용정보 접근 허용이 필요합니다.\")\r\n            dlg.setPositiveButton( \"확인\") { dialog, which ->\r\n                startActivity(Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS))\r\n            }\r\n            dlg.setNegativeButton(\"취소\", null)\r\n            //dlg.show()\r\n\r\n        } else { //이미 권한이 허용된 경우\r\n            //화면 넘어감\r\n        }\r\n\r\n        // 사용자 로그인상태 확인\r\n        auth = Firebase.auth\r\n\r\n        // 사용자가 로그인되어 있다면(자동로그인) SettingTimeAcitivity로\r\n        if (auth.currentUser != null) {\r\n            val intent = Intent(this, PersonalInformationActivity::class.java)\r\n            startActivity(intent)\r\n            finish()\r\n        }\r\n\r\n        // 뷰 연결\r\n        input_email = findViewById(R.id.login_email)\r\n        input_pw = findViewById(R.id.login_pw)\r\n        btnJoin = findViewById(R.id.btnBackToSignUp)\r\n        btnlogin = findViewById(R.id.btnLogin)\r\n\r\n        btnJoin.setOnClickListener{\r\n            val intent = Intent(this, SignUpActivity::class.java)\r\n            startActivity(intent)\r\n            finish()\r\n        }\r\n\r\n        btnlogin.setOnClickListener(View.OnClickListener {\r\n            var email = input_email.text.toString()\r\n            var pw = input_pw.text.toString()\r\n\r\n            if(TextUtils.isEmpty(email)) {\r\n                Toast.makeText(applicationContext,\"이메일을 입력해주세요.\", Toast.LENGTH_SHORT).show()\r\n                return@OnClickListener\r\n            }\r\n            if(TextUtils.isEmpty(pw)){\r\n                Toast.makeText(applicationContext,\"비밀번호를 입력해주세요.\", Toast.LENGTH_SHORT).show()\r\n                return@OnClickListener\r\n            }\r\n\r\n            // 로그인 시도\r\n            auth.signInWithEmailAndPassword(email, pw).addOnCompleteListener(this) {task ->\r\n                if(task.isSuccessful) {\r\n                    Log.d(TAG, \"로그인:성공\")\r\n                    val user = auth.currentUser\r\n\r\n                    val intent = Intent(this, SettingTimeActivity::class.java)\r\n                    startActivity(intent)\r\n                    finish()\r\n                    // updateUi(user) 함수 사용 - 만들어야 함.\r\n                } else {\r\n                    Log.w(TAG, \"로그인:실패\", task.exception)\r\n                    Toast.makeText(baseContext, \"인증에 실패했습니다.\", Toast.LENGTH_SHORT).show()\r\n                    //updateUI(null)\r\n                }\r\n\r\n            }\r\n\r\n        })\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    // 사용정보 접근 권한 허용 여부 확인\r\n    @SuppressLint(\"NewApi\")\r\n    private fun checkForPermission(): Boolean {\r\n        val appOps = getSystemService(Context.APP_OPS_SERVICE) as AppOpsManager\r\n        val mode = appOps.checkOpNoThrow(\r\n            AppOpsManager.OPSTR_GET_USAGE_STATS,\r\n            Process.myUid(), packageName)\r\n        return mode == AppOpsManager.MODE_ALLOWED\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/guru2project/MainActivity.kt	(revision 97296888eb8cf9747d2d2807e112474742524598)
+++ app/src/main/java/com/example/guru2project/MainActivity.kt	(date 1628057452091)
@@ -30,7 +30,7 @@
 
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
-        setContentView(R.layout.activity_main)
+        setContentView(R.layout.activity_login)
 
         //사용정보 접근 권한이 허용되지 않았을때
         if (!checkForPermission()) {
Index: app/src/main/java/com/example/guru2project/LeftTime.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.guru2project\r\n\r\nimport android.app.usage.UsageEvents\r\nimport android.app.usage.UsageStatsManager\r\nimport android.content.Context\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.widget.TextView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport java.time.LocalDate\r\nimport java.util.*\r\nimport kotlin.collections.HashMap\r\n\r\nclass LeftTime : AppCompatActivity() {\r\n\r\n    lateinit var usageMap: HashMap<String, Long>\r\n    lateinit var appName: TextView\r\n    lateinit var appUsageTime: TextView\r\n\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_left_time)\r\n\r\n\r\n        var tz= TimeZone.getDefault()\r\n        var tzId= tz.toZoneId()\r\n        var dtNow = LocalDate.now()\r\n        var dtStart = dtNow.atStartOfDay(tzId).toInstant().toEpochMilli()\r\n\r\n        usageMap = mapUsageTimes(dtStart, System.currentTimeMillis())\r\n\r\n        var totalTime: Long = 0\r\n        usageMap.forEach {it->\r\n            totalTime += it.value\r\n        }\r\n\r\n        // 사용시간을 기준으로 내림차순으로 배열\r\n        val result = usageMap.toList().sortedByDescending { (_, value) -> value}\r\n        val list:MutableList<Pair<String, Long>> = mutableListOf()\r\n        //하루동안 제일 많이 사용한 어플 3개\r\n        for (i in 0..2) {\r\n            list.add(Pair(result[i].first, result[i].second))\r\n\r\n                //print(result[i].first)\r\n                //println(result[i].second)\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    //하루동안 사용한 앱의 패키지 이름과 사용시간을 MutableList로 가져오기\r\n    @RequiresApi(Build.VERSION_CODES.LOLLIPOP)\r\n    private fun mapUsageTimes(startTime: Long, endTime: Long) : HashMap<String, Long>{\r\n        var currentEvent: UsageEvents.Event\r\n        val allEvents: MutableList<UsageEvents.Event> = ArrayList()\r\n        val map: HashMap<String, Long> = HashMap()\r\n        val mUsageStatsManager = getSystemService(Context.USAGE_STATS_SERVICE) as UsageStatsManager\r\n        // 발생 이벤트를 쿼리\r\n        val usageEvents = mUsageStatsManager.queryEvents(startTime, endTime)\r\n\r\n        while (usageEvents.hasNextEvent()) {\r\n            currentEvent = UsageEvents.Event()\r\n            usageEvents.getNextEvent(currentEvent)\r\n            val packageName = currentEvent.packageName\r\n            //추가 이벤트가 발견되면 이벤트 목록에 추가\r\n            if (currentEvent.eventType == UsageEvents.Event.ACTIVITY_RESUMED || currentEvent.eventType == UsageEvents.Event.ACTIVITY_PAUSED || currentEvent.eventType == UsageEvents.Event.ACTIVITY_STOPPED) {\r\n                allEvents.add(currentEvent)\r\n                if (!map.containsKey(packageName)) {\r\n                    map[packageName] = 0\r\n                }\r\n            }\r\n        }\r\n\r\n        //이벤트 발생시\r\n        for (i in 0 until (allEvents.size - 1) step 1) {\r\n            val event0 = allEvents[i]\r\n            val event1 = allEvents[i + 1]\r\n\r\n            //앱 실행할때마다 사용시간 측정\r\n            if (event0.eventType == UsageEvents.Event.ACTIVITY_RESUMED &&\r\n                (event1.eventType == UsageEvents.Event.ACTIVITY_PAUSED || event1.eventType == UsageEvents.Event.ACTIVITY_STOPPED)\r\n                && event0.packageName == event1.packageName) {\r\n                val runtime = event1.timeStamp - event0.timeStamp\r\n                val tInForeground = map[event0.packageName]!!.plus(runtime)\r\n                map[event0.packageName] = tInForeground\r\n            }\r\n        }\r\n\r\n        return map\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/guru2project/LeftTime.kt	(revision 97296888eb8cf9747d2d2807e112474742524598)
+++ app/src/main/java/com/example/guru2project/LeftTime.kt	(date 1628063939962)
@@ -3,6 +3,7 @@
 import android.app.usage.UsageEvents
 import android.app.usage.UsageStatsManager
 import android.content.Context
+import android.content.SharedPreferences
 import android.os.Build
 import android.os.Bundle
 import android.widget.TextView
@@ -14,16 +15,24 @@
 
 class LeftTime : AppCompatActivity() {
 
-    lateinit var usageMap: HashMap<String, Long>
-    lateinit var appName: TextView
-    lateinit var appUsageTime: TextView
+    private lateinit var appName: TextView
+    private lateinit var appUsageTime: TextView
+    private lateinit var tvHours: TextView
+    private lateinit var tvMinuts: TextView
 
+    private lateinit var usageMap: HashMap<String, Long>
+
+    private var totalTime: Long = 0
+    private var goalHours: Long = 0
+    private var leftHours: Int = 0
 
     @RequiresApi(Build.VERSION_CODES.O)
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_left_time)
 
+        tvHours = findViewById(R.id.tvHours)
+        tvMinuts = findViewById(R.id.tvMinutes)
 
         var tz= TimeZone.getDefault()
         var tzId= tz.toZoneId()
@@ -32,7 +41,6 @@
 
         usageMap = mapUsageTimes(dtStart, System.currentTimeMillis())
 
-        var totalTime: Long = 0
         usageMap.forEach {it->
             totalTime += it.value
         }
@@ -47,12 +55,20 @@
                 //print(result[i].first)
                 //println(result[i].second)
         }
+        val pref = getSharedPreferences("pref", MODE_PRIVATE)
+        goalHours = pref.getLong("GOAL_HOURS", 57600000)
 
+        //남은 시간
+        leftHours = (goalHours-totalTime).toInt()
+        val min = (leftHours/ (1000*60) )% 60
+        val hour =(leftHours / (1000*60*60))%24
+        tvHours.text="$min"
+        tvMinuts.text="$hour"
 
 
     }
 
-    //하루동안 사용한 앱의 패키지 이름과 사용시간을 MutableList로 가져오기
+    //하루동안 사용한 앱의 패키지 이름과 사용시간을 Map으로 가져오기
     @RequiresApi(Build.VERSION_CODES.LOLLIPOP)
     private fun mapUsageTimes(startTime: Long, endTime: Long) : HashMap<String, Long>{
         var currentEvent: UsageEvents.Event
@@ -92,4 +108,11 @@
 
         return map
     }
-}
\ No newline at end of file
+
+    private fun a(){
+
+    }
+}
+
+
+
