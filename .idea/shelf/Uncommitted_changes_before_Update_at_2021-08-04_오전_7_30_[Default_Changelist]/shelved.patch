Index: app/src/main/res/layout/activity_hours_of_use.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".HoursOfUse\">\r\n\r\n    <CalendarView\r\n        android:id=\"@+id/calendarView\"\r\n        android:layout_width=\"350dp\"\r\n        android:layout_height=\"296dp\"\r\n        android:layout_marginStart=\"30dp\"\r\n        android:layout_marginTop=\"26dp\"\r\n        android:layout_marginEnd=\"30dp\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_hours_of_use.xml	(revision 04f1496ea1ac7c1200a4e25073c9f2a953ad2d94)
+++ app/src/main/res/layout/activity_hours_of_use.xml	(date 1628026723730)
@@ -16,4 +16,27 @@
         app:layout_constraintEnd_toEndOf="parent"
         app:layout_constraintStart_toStartOf="parent"
         app:layout_constraintTop_toTopOf="parent" />
+
+    <TableLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintTop_toBottomOf="@id/calendarView">
+
+        <TableRow
+            android:layout_width="match_parent"
+            android:layout_height="match_parent" />
+
+        <TableRow
+            android:layout_width="match_parent"
+            android:layout_height="match_parent" />
+
+        <TableRow
+            android:layout_width="match_parent"
+            android:layout_height="match_parent" />
+
+        <TableRow
+            android:layout_width="match_parent"
+            android:layout_height="match_parent" />
+    </TableLayout>
 </androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/res/layout/activity_left_time.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:orientation=\"vertical\"\r\n    tools:context=\".LeftTime\">\r\n\r\n    <TextView\r\n        android:id=\"@+id/LeftTImeText\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_gravity=\"center_horizontal\"\r\n        android:layout_marginStart=\"116dp\"\r\n        android:layout_marginTop=\"78dp\"\r\n        android:layout_marginEnd=\"116dp\"\r\n        android:layout_marginBottom=\"50dp\"\r\n        android:fontFamily=\"@font/hangul_font\"\r\n        android:text=\"@string/left_hours\"\r\n        android:textColor=\"#9AE39D\"\r\n        android:textSize=\"36sp\"\r\n        android:textStyle=\"bold\" />\r\n\r\n    <LinearLayout\r\n        android:id=\"@+id/linear\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:orientation=\"vertical\">\r\n\r\n        <androidx.constraintlayout.widget.ConstraintLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"180dp\">\r\n\r\n            <TextView\r\n                android:id=\"@+id/tvHours\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"0\"\r\n                android:textSize=\"50dp\"\r\n                app:layout_constraintBaseline_toBaselineOf=\"@+id/textView13\"\r\n                app:layout_constraintBottom_toBottomOf=\"parent\"\r\n                app:layout_constraintEnd_toStartOf=\"@+id/textView13\"\r\n                app:layout_constraintHorizontal_bias=\"0.854\"\r\n                app:layout_constraintStart_toStartOf=\"parent\"\r\n                app:layout_constraintTop_toTopOf=\"parent\"\r\n                app:layout_constraintVertical_bias=\"0.584\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/textView13\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"@string/hours\"\r\n                android:textSize=\"30dp\"\r\n                app:layout_constraintBottom_toBottomOf=\"parent\"\r\n                app:layout_constraintEnd_toEndOf=\"parent\"\r\n                app:layout_constraintHorizontal_bias=\"0.391\"\r\n                app:layout_constraintStart_toStartOf=\"parent\"\r\n                app:layout_constraintTop_toTopOf=\"parent\"\r\n                app:layout_constraintVertical_bias=\"0.564\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/tvMinutes\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"00\"\r\n                android:textSize=\"50dp\"\r\n                app:layout_constraintBaseline_toBaselineOf=\"@+id/textView14\"\r\n                app:layout_constraintEnd_toStartOf=\"@+id/textView14\"\r\n                app:layout_constraintHorizontal_bias=\"0.911\"\r\n                app:layout_constraintStart_toEndOf=\"@+id/textView13\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/textView14\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginEnd=\"104dp\"\r\n                android:text=\"@string/minute\"\r\n                android:textSize=\"30dp\"\r\n                app:layout_constraintBaseline_toBaselineOf=\"@+id/textView13\"\r\n                app:layout_constraintEnd_toEndOf=\"parent\" />\r\n        </androidx.constraintlayout.widget.ConstraintLayout>\r\n    </LinearLayout>\r\n\r\n</LinearLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_left_time.xml	(revision 04f1496ea1ac7c1200a4e25073c9f2a953ad2d94)
+++ app/src/main/res/layout/activity_left_time.xml	(date 1628028970263)
@@ -80,6 +80,34 @@
                 app:layout_constraintBaseline_toBaselineOf="@+id/textView13"
                 app:layout_constraintEnd_toEndOf="parent" />
         </androidx.constraintlayout.widget.ConstraintLayout>
+
+        <androidx.constraintlayout.widget.ConstraintLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent">
+
+            <TextView
+                android:id="@+id/tvAppName"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginStart="50dp"
+                android:layout_marginTop="26dp"
+                android:text="사용기록 없음"
+                android:textSize="24sp"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toTopOf="parent" />
+
+            <TextView
+                android:id="@+id/tvUsageTimes"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginEnd="50dp"
+                android:text="시간"
+                android:textSize="20sp"
+                app:layout_constraintBaseline_toBaselineOf="@+id/tvAppName"
+                app:layout_constraintEnd_toEndOf="parent" />
+        </androidx.constraintlayout.widget.ConstraintLayout>
     </LinearLayout>
 
+
+
 </LinearLayout>
\ No newline at end of file
Index: app/src/main/java/com/example/guru2project/HoursOfUse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.guru2project\r\n\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\n\r\nclass HoursOfUse : AppCompatActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_hours_of_use)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/guru2project/HoursOfUse.kt	(revision 04f1496ea1ac7c1200a4e25073c9f2a953ad2d94)
+++ app/src/main/java/com/example/guru2project/HoursOfUse.kt	(date 1628025815920)
@@ -1,11 +1,28 @@
 package com.example.guru2project
 
-import androidx.appcompat.app.AppCompatActivity
 import android.os.Bundle
+import android.widget.CalendarView
+import android.widget.CalendarView.OnDateChangeListener
+import androidx.appcompat.app.AppCompatActivity
+
 
 class HoursOfUse : AppCompatActivity() {
+
+    lateinit var calendarView: CalendarView
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_hours_of_use)
+
+        calendarView.setOnDateChangeListener(OnDateChangeListener { view, year, month, dayOfMonth ->
+            diaryTextView.setVisibility(View.VISIBLE)
+            save_Btn.setVisibility(View.VISIBLE)
+            contextEditText.setVisibility(View.VISIBLE)
+            textView2.setVisibility(View.INVISIBLE)
+            cha_Btn.setVisibility(View.INVISIBLE)
+            del_Btn.setVisibility(View.INVISIBLE)
+            diaryTextView.setText(String.format("%d / %d / %d", year, month + 1, dayOfMonth))
+            contextEditText.setText("")
+            checkDay(year, month, dayOfMonth, userID)
+        })
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/guru2project/LeftTime.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.guru2project\r\n\r\nimport android.app.usage.UsageEvents\r\nimport android.app.usage.UsageStatsManager\r\nimport android.content.Context\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport java.text.SimpleDateFormat\r\nimport java.time.LocalDate\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.*\r\nimport kotlin.collections.HashMap\r\n\r\nclass LeftTime : AppCompatActivity() {\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_left_time)\r\n\r\n\r\n        var tz= TimeZone.getDefault()\r\n        var tzId= tz.toZoneId()\r\n        var dtNow = LocalDate.now()\r\n        var dtStart = dtNow.atStartOfDay(tzId).toInstant().toEpochMilli()\r\n\r\n        var usageList = queryUsageTimes(dtStart, System.currentTimeMillis())\r\n        usageList.forEach { it->\r\n            println(it.first+\" : \"+it.second)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //하루동안 사용한 앱의 패키지 이름과 사용시간을 MutableList로 가져오기\r\n    @RequiresApi(Build.VERSION_CODES.LOLLIPOP)\r\n    private fun queryUsageTimes(startTime: Long, endTime: Long) : MutableList<Pair<String, Long>>{\r\n        var currentEvent: UsageEvents.Event\r\n        val allEvents: MutableList<UsageEvents.Event> = ArrayList()\r\n        val map: HashMap<String, Long> = HashMap()\r\n        val mUsageStatsManager = getSystemService(Context.USAGE_STATS_SERVICE) as UsageStatsManager\r\n        // 발생 이벤트를 쿼리\r\n        val usageEvents = mUsageStatsManager.queryEvents(startTime, endTime)\r\n\r\n        while (usageEvents.hasNextEvent()) {\r\n            currentEvent = UsageEvents.Event()\r\n            usageEvents.getNextEvent(currentEvent)\r\n            val packageName = currentEvent.packageName\r\n            //추가 이벤트가 발견되면 이벤트 목록에 추가\r\n            if (currentEvent.eventType == UsageEvents.Event.ACTIVITY_RESUMED || currentEvent.eventType == UsageEvents.Event.ACTIVITY_PAUSED || currentEvent.eventType == UsageEvents.Event.ACTIVITY_STOPPED) {\r\n                allEvents.add(currentEvent)\r\n                if (!map.containsKey(packageName)) {\r\n                    map[packageName] = 0\r\n                }\r\n            }\r\n        }\r\n\r\n        //이벤트 발생시\r\n        for (i in 0 until (allEvents.size - 1) step 1) {\r\n            val event0 = allEvents[i]\r\n            val event1 = allEvents[i + 1]\r\n\r\n            //앱 실행할때마다 사용시간 측정\r\n            if (event0.eventType == UsageEvents.Event.ACTIVITY_RESUMED &&\r\n                (event1.eventType == UsageEvents.Event.ACTIVITY_PAUSED || event1.eventType == UsageEvents.Event.ACTIVITY_STOPPED)\r\n                && event0.packageName == event1.packageName) {\r\n                val runtime = event1.timeStamp - event0.timeStamp\r\n                val tInForeground = map[event0.packageName]!!.plus(runtime)\r\n                map[event0.packageName] = tInForeground\r\n            }\r\n        }\r\n\r\n        // 사용시간을 기준으로 내림차순으로 배열\r\n        val result = map.toList().sortedByDescending { (_, value) -> value}\r\n        val list:MutableList<Pair<String, Long>> = mutableListOf()\r\n        //하루동안 제일 많이 사용한 어플 3개\r\n        for (i in 0..2) {\r\n            list.add(Pair(result[i].first, result[i].second))\r\n\r\n            //print(result[i].first)\r\n            //println(result[i].second)\r\n        }\r\n        return list\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/guru2project/LeftTime.kt	(revision 04f1496ea1ac7c1200a4e25073c9f2a953ad2d94)
+++ app/src/main/java/com/example/guru2project/LeftTime.kt	(date 1628028970315)
@@ -5,15 +5,20 @@
 import android.content.Context
 import android.os.Build
 import android.os.Bundle
+import android.widget.TextView
 import androidx.annotation.RequiresApi
 import androidx.appcompat.app.AppCompatActivity
-import java.text.SimpleDateFormat
 import java.time.LocalDate
-import java.time.format.DateTimeFormatter
 import java.util.*
 import kotlin.collections.HashMap
 
 class LeftTime : AppCompatActivity() {
+
+    lateinit var usageMap: HashMap<String, Long>
+    lateinit var appName: TextView
+    lateinit var appUsageTime: TextView
+
+
     @RequiresApi(Build.VERSION_CODES.O)
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
@@ -25,17 +30,31 @@
         var dtNow = LocalDate.now()
         var dtStart = dtNow.atStartOfDay(tzId).toInstant().toEpochMilli()
 
-        var usageList = queryUsageTimes(dtStart, System.currentTimeMillis())
-        usageList.forEach { it->
-            println(it.first+" : "+it.second)
+        usageMap = mapUsageTimes(dtStart, System.currentTimeMillis())
+
+        var totalTime: Long = 0
+        usageMap.forEach {it->
+            totalTime += it.value
         }
+
+        // 사용시간을 기준으로 내림차순으로 배열
+        val result = usageMap.toList().sortedByDescending { (_, value) -> value}
+        val list:MutableList<Pair<String, Long>> = mutableListOf()
+        //하루동안 제일 많이 사용한 어플 3개
+        for (i in 0..2) {
+            list.add(Pair(result[i].first, result[i].second))
+
+                //print(result[i].first)
+                //println(result[i].second)
+        }
+
 
 
     }
 
     //하루동안 사용한 앱의 패키지 이름과 사용시간을 MutableList로 가져오기
     @RequiresApi(Build.VERSION_CODES.LOLLIPOP)
-    private fun queryUsageTimes(startTime: Long, endTime: Long) : MutableList<Pair<String, Long>>{
+    private fun mapUsageTimes(startTime: Long, endTime: Long) : HashMap<String, Long>{
         var currentEvent: UsageEvents.Event
         val allEvents: MutableList<UsageEvents.Event> = ArrayList()
         val map: HashMap<String, Long> = HashMap()
@@ -71,16 +90,6 @@
             }
         }
 
-        // 사용시간을 기준으로 내림차순으로 배열
-        val result = map.toList().sortedByDescending { (_, value) -> value}
-        val list:MutableList<Pair<String, Long>> = mutableListOf()
-        //하루동안 제일 많이 사용한 어플 3개
-        for (i in 0..2) {
-            list.add(Pair(result[i].first, result[i].second))
-
-            //print(result[i].first)
-            //println(result[i].second)
-        }
-        return list
+        return map
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/guru2project/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.guru2project\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.AlertDialog\r\nimport android.app.AppOpsManager\r\nimport android.content.ContentValues.TAG\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.os.Process\r\nimport android.provider.Settings\r\nimport android.text.TextUtils\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport android.widget.Toast\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.ktx.Firebase\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n\r\n    private lateinit var auth: FirebaseAuth\r\n    private lateinit var input_email: EditText\r\n    private lateinit var input_pw: EditText\r\n    private lateinit var btnJoin: Button\r\n    private lateinit var btnlogin: Button\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n\r\n        //사용정보 접근 권한이 허용되지 않았을때\r\n        if (!checkForPermission()) {\r\n            var dlg = AlertDialog.Builder(this)\r\n            dlg.setTitle(\"권한이 필요한 이유\")\r\n            dlg.setMessage(\"어플 사용을 위해서 사용정보 접근 허용이 필요합니다.\")\r\n            dlg.setPositiveButton( \"확인\") { dialog, which ->\r\n                startActivity(Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS))\r\n            }\r\n            dlg.setNegativeButton(\"취소\", null)\r\n            //dlg.show()\r\n\r\n        } else { //이미 권한이 허용된 경우\r\n            //화면 넘어감\r\n        }\r\n\r\n        // 사용자 로그인상태 확인\r\n        auth = Firebase.auth\r\n\r\n        // 사용자가 로그인되어 있다면(자동로그인) SettingTimeAcitivity로\r\n        if (auth.currentUser != null) {\r\n            val intent = Intent(this, UserGifticonListActivity::class.java)\r\n            startActivity(intent)\r\n            finish()\r\n        }\r\n\r\n        // 뷰 연결\r\n        input_email = findViewById(R.id.login_email)\r\n        input_pw = findViewById(R.id.login_pw)\r\n        btnJoin = findViewById(R.id.btnBackToSignUp)\r\n        btnlogin = findViewById(R.id.btnLogin)\r\n\r\n        btnJoin.setOnClickListener{\r\n            val intent = Intent(this, SignUpActivity::class.java)\r\n            startActivity(intent)\r\n            finish()\r\n        }\r\n\r\n        btnlogin.setOnClickListener(View.OnClickListener {\r\n            var email = input_email.text.toString()\r\n            var pw = input_pw.text.toString()\r\n\r\n            if(TextUtils.isEmpty(email)) {\r\n                Toast.makeText(applicationContext,\"이메일을 입력해주세요.\", Toast.LENGTH_SHORT).show()\r\n                return@OnClickListener\r\n            }\r\n            if(TextUtils.isEmpty(pw)){\r\n                Toast.makeText(applicationContext,\"비밀번호를 입력해주세요.\", Toast.LENGTH_SHORT).show()\r\n                return@OnClickListener\r\n            }\r\n\r\n            // 로그인 시도\r\n            auth.signInWithEmailAndPassword(email, pw).addOnCompleteListener(this) {task ->\r\n                if(task.isSuccessful) {\r\n                    Log.d(TAG, \"로그인:성공\")\r\n                    val user = auth.currentUser\r\n\r\n                    val intent = Intent(this, SettingTimeActivity::class.java)\r\n                    startActivity(intent)\r\n                    finish()\r\n                    // updateUi(user) 함수 사용 - 만들어야 함.\r\n                } else {\r\n                    Log.w(TAG, \"로그인:실패\", task.exception)\r\n                    Toast.makeText(baseContext, \"인증에 실패했습니다.\", Toast.LENGTH_SHORT).show()\r\n                    //updateUI(null)\r\n                }\r\n\r\n            }\r\n\r\n        })\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    // 사용정보 접근 권한 허용 여부 확인\r\n    @SuppressLint(\"NewApi\")\r\n    private fun checkForPermission(): Boolean {\r\n        val appOps = getSystemService(Context.APP_OPS_SERVICE) as AppOpsManager\r\n        val mode = appOps.checkOpNoThrow(\r\n            AppOpsManager.OPSTR_GET_USAGE_STATS,\r\n            Process.myUid(), packageName)\r\n        return mode == AppOpsManager.MODE_ALLOWED\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/guru2project/MainActivity.kt	(revision 04f1496ea1ac7c1200a4e25073c9f2a953ad2d94)
+++ app/src/main/java/com/example/guru2project/MainActivity.kt	(date 1628021344640)
@@ -6,6 +6,8 @@
 import android.content.ContentValues.TAG
 import android.content.Context
 import android.content.Intent
+import android.content.SharedPreferences
+import android.os.Build
 import androidx.appcompat.app.AppCompatActivity
 import android.os.Bundle
 import android.os.Process
@@ -16,9 +18,14 @@
 import android.widget.Button
 import android.widget.EditText
 import android.widget.Toast
+import androidx.annotation.RequiresApi
 import com.google.firebase.auth.FirebaseAuth
 import com.google.firebase.auth.ktx.auth
 import com.google.firebase.ktx.Firebase
+import java.text.SimpleDateFormat
+import java.time.LocalDate
+import java.time.format.DateTimeFormatter
+import java.util.*
 
 class MainActivity : AppCompatActivity() {
 
@@ -27,15 +34,42 @@
     private lateinit var input_pw: EditText
     private lateinit var btnJoin: Button
     private lateinit var btnlogin: Button
+    //private lateinit var sharedPref: SharedPreferences
+    private lateinit var nowDate: LocalDate
 
+    @RequiresApi(Build.VERSION_CODES.O)
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
-        setContentView(R.layout.activity_main)
+        setContentView(R.layout.activity_login)
+        Log.d(TAG,"show")
+
 
+        val sharedPref = getSharedPreferences("pref", Context.MODE_PRIVATE)
+        nowDate = LocalDate.now()
+        val currentDate = nowDate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"))
+
+        /*//오늘 이미 실행이 되었을때
+        if (sharedPref.getString("LAST_LAUNCH_DATE", "nodate")!!.contains(currentDate)) {
+            println("second************")
+            var a=sharedPref.getString("LAST_LAUNCH_DATE", "def")
+            println(a)
+        } else {
+            println("first************")
+            //오늘 처음 실행했을때
+            // LAST_LAUNCH_DATE가 하루 이상일때 if문
+            // 적립
+            val editor = sharedPref.edit()
+            editor.putString("LAST_LAUNCH_DATE", currentDate)
+            var a=sharedPref.getString("LAST_LAUNCH_DATE", "def")
+            println(a)
+            //editor.commit()
+            editor.apply()
+
+        }*/
         //사용정보 접근 권한이 허용되지 않았을때
         if (!checkForPermission()) {
             var dlg = AlertDialog.Builder(this)
-            dlg.setTitle("권한이 필요한 이유")
+            dlg.setTitle("권한이 필요합니다!!")
             dlg.setMessage("어플 사용을 위해서 사용정보 접근 허용이 필요합니다.")
             dlg.setPositiveButton( "확인") { dialog, which ->
                 startActivity(Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS))
@@ -43,6 +77,7 @@
             dlg.setNegativeButton("취소", null)
             //dlg.show()
 
+
         } else { //이미 권한이 허용된 경우
             //화면 넘어감
         }
@@ -52,7 +87,7 @@
 
         // 사용자가 로그인되어 있다면(자동로그인) SettingTimeAcitivity로
         if (auth.currentUser != null) {
-            val intent = Intent(this, UserGifticonListActivity::class.java)
+            val intent = Intent(this, SettingTimeActivity::class.java)
             startActivity(intent)
             finish()
         }
